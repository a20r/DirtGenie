import React from 'react';
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm';
import RouteMap from './RouteMap';

interface TripResultsProps {
    response: any;
    onReviseClick: () => void;
}

const TripResults: React.FC<TripResultsProps> = ({ response, onReviseClick }) => {
    const handleDownload = async () => {
        try {
            // Call backend to generate and download zip file
            const downloadResponse = await fetch('/api/download-trip-package', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    trip_plan: response.trip_plan,
                    geojson: response.geojson,
                    total_distance: response.total_distance,
                    start_location: response.start_location || 'Trip',
                    end_location: response.end_location || 'Adventure'
                })
            });

            if (!downloadResponse.ok) {
                throw new Error('Download failed');
            }

            // Create blob and download
            const blob = await downloadResponse.blob();
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = `trip-package-${new Date().toISOString().split('T')[0]}.zip`;
            document.body.appendChild(a);
            a.click();
            window.URL.revokeObjectURL(url);
            document.body.removeChild(a);
        } catch (error) {
            console.error('Download error:', error);
            alert('Failed to download trip package. Please try again.');
        }
    };

    const handleNotionImport = async () => {
        try {
            // Clean markdown content for Notion
            let cleanContent = response.trip_plan;
            
            // Remove any code block wrapping
            if (cleanContent.startsWith('```markdown\n')) {
                cleanContent = cleanContent.replace(/^```markdown\n/, '').replace(/\n```$/, '');
            } else if (cleanContent.startsWith('```\n')) {
                cleanContent = cleanContent.replace(/^```\n/, '').replace(/\n```$/, '');
            } else if (cleanContent.startsWith('```')) {
                cleanContent = cleanContent.replace(/^```[a-zA-Z]*\n/, '').replace(/\n```$/, '');
            }

            // Add Notion-friendly header and footer
            const pageTitle = `${response.start_location || 'Trip'} to ${response.end_location || 'Adventure'} - Bikepacking Plan`;
            const notionContent = `# ${pageTitle}

*Generated by DirtGenie on ${new Date().toLocaleDateString()}*

---

${cleanContent}

---

*Generated by DirtGenie - AI-Powered Bikepacking Trip Planner*`;

            // Copy to clipboard
            await navigator.clipboard.writeText(notionContent);
            
            // Show success message with instructions
            const shouldOpenNotion = window.confirm(`‚úÖ Trip plan copied to clipboard!\n\nüöÄ Ready to import to Notion:\n\n1. Click "OK" to open Notion\n2. Create a new page (or go to existing page)\n3. Paste (Ctrl/Cmd + V)\n4. Notion will automatically format the markdown\n5. Customize the page as needed\n\nClick OK to open Notion now, or Cancel to stay here.`);
            
            if (shouldOpenNotion) {
                // Open Notion in new tab
                window.open('https://www.notion.so/new', '_blank');
            }
            
        } catch (error) {
            console.error('Notion import error:', error);
            
            // Fallback for browsers that don't support clipboard API
            try {
                const textArea = document.createElement('textarea');
                textArea.value = response.trip_plan;
                textArea.style.position = 'fixed';
                textArea.style.left = '-999999px';
                textArea.style.top = '-999999px';
                document.body.appendChild(textArea);
                textArea.focus();
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                
                alert(`‚úÖ Trip plan copied to clipboard!\n\nTo import to Notion:\n1. Open Notion (notion.so)\n2. Create a new page\n3. Paste (Ctrl/Cmd + V)\n4. Notion will auto-format the markdown`);
                
                if (window.confirm('Open Notion now?')) {
                    window.open('https://www.notion.so/new', '_blank');
                }
            } catch (fallbackError) {
                alert('Unable to copy content automatically. Please manually select and copy the trip plan text above, then paste it into Notion.');
            }
        }
    };
    if (!response || !response.success) {
        return (
            <div className="bg-red-50 border border-red-200 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-red-800 mb-2">‚ùå Planning Failed</h3>
                <p className="text-red-700">{response?.error || 'An error occurred while planning your trip.'}</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            {/* Trip Summary */}
            <div className="bg-green-50 border border-green-200 rounded-lg p-6">
                <h3 className="text-lg font-semibold text-green-800 mb-4">üéâ Your Adventure is Planned!</h3>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div className="bg-white rounded-lg p-4">
                        <div className="text-sm text-gray-600">Total Distance</div>
                        <div className="text-2xl font-bold text-green-700">
                            {response.total_distance ? `${response.total_distance.toFixed(1)} km` : 'N/A'}
                        </div>
                    </div>

                    <div className="bg-white rounded-lg p-4">
                        <div className="text-sm text-gray-600">Trip Status</div>
                        <div className="text-2xl font-bold text-green-700">Ready to Go!</div>
                    </div>
                </div>

                <div className="mt-4 flex gap-3 flex-wrap">
                    <button
                        onClick={onReviseClick}
                        className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg transition duration-200"
                    >
                        ‚úèÔ∏è Revise Plan
                    </button>

                    <button
                        onClick={handleDownload}
                        className="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition duration-200"
                    >
                        üì¶ Download Package
                    </button>

                    <button
                        onClick={handleNotionImport}
                        className="bg-purple-600 hover:bg-purple-700 text-white px-4 py-2 rounded-lg transition duration-200"
                    >
                        üìù Import to Notion
                    </button>

                    <button
                        onClick={() => window.print()}
                        className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg transition duration-200"
                    >
                        üñ®Ô∏è Print Plan
                    </button>
                </div>
            </div>

            {/* Trip Plan */}
            {response.trip_plan && (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <h3 className="text-xl font-bold text-gray-900 mb-4">üìã Detailed Trip Plan</h3>
                    <div className="prose prose-slate max-w-none">
                        <ReactMarkdown remarkPlugins={[remarkGfm]}>
                            {(() => {
                                // Clean up the markdown content - remove any code block wrapping
                                let content = response.trip_plan;

                                // Remove markdown code block wrapping if present
                                if (content.startsWith('```markdown\n')) {
                                    content = content.replace(/^```markdown\n/, '').replace(/\n```$/, '');
                                } else if (content.startsWith('```\n')) {
                                    content = content.replace(/^```\n/, '').replace(/\n```$/, '');
                                } else if (content.startsWith('```')) {
                                    content = content.replace(/^```[a-zA-Z]*\n/, '').replace(/\n```$/, '');
                                }

                                // Fix the italic text at the end that might be in a code block
                                content = content.replace(/```\n\*\((.*?)\)\*\n```/g, '*($1)*');

                                return content;
                            })()}
                        </ReactMarkdown>
                    </div>
                </div>
            )}

            {/* Interactive Route Map */}
            {response.geojson && (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <h3 className="text-xl font-bold text-gray-900 mb-4">üó∫Ô∏è Route Map</h3>
                    <RouteMap geojson={response.geojson} />
                </div>
            )}
        </div>
    );
};

export default TripResults;
